
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000037  00000000  00000000  00000116  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001d2  00000000  00000000  0000014d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000119  00000000  00000000  0000031f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001a2  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000005dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000f3  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000026  00000000  00000000  0000070f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	15 d0       	rcall	.+42     	; 0x5e <main>
  34:	34 c0       	rjmp	.+104    	; 0x9e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <ADC_init>:
#include <avr/interrupt.h>
#include <avr/iom8.h>

void ADC_init()
{
         ADMUX = 0x00;
  38:	17 b8       	out	0x07, r1	; 7
         ADCSRA = 0x8D;
  3a:	8d e8       	ldi	r24, 0x8D	; 141
  3c:	86 b9       	out	0x06, r24	; 6
}
  3e:	08 95       	ret

00000040 <ADC_result>:

unsigned int ADC_result(unsigned char adc_input)
{
         ADMUX=adc_input | (ADMUX & 0xF0);
  40:	97 b1       	in	r25, 0x07	; 7
  42:	90 7f       	andi	r25, 0xF0	; 240
  44:	98 2b       	or	r25, r24
  46:	97 b9       	out	0x07, r25	; 7
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  48:	83 e0       	ldi	r24, 0x03	; 3
  4a:	8a 95       	dec	r24
  4c:	f1 f7       	brne	.-4      	; 0x4a <ADC_result+0xa>
         _delay_us(10);
         ADCSRA |= 0x40;
  4e:	36 9a       	sbi	0x06, 6	; 6
         while((ADCSRA & 0x10)==0);
  50:	34 9b       	sbis	0x06, 4	; 6
  52:	fe cf       	rjmp	.-4      	; 0x50 <ADC_result+0x10>
        ADCSRA|=0x10;
  54:	34 9a       	sbi	0x06, 4	; 6
        return ADCW;
  56:	24 b1       	in	r18, 0x04	; 4
  58:	35 b1       	in	r19, 0x05	; 5
}
  5a:	c9 01       	movw	r24, r18
  5c:	08 95       	ret

0000005e <main>:

int main(void)
{
    DDRB = 0x0F; 
  5e:	8f e0       	ldi	r24, 0x0F	; 15
  60:	87 bb       	out	0x17, r24	; 23
	ICR1 = 255;		//Set TOP value 
  62:	8f ef       	ldi	r24, 0xFF	; 255
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	97 bd       	out	0x27, r25	; 39
  68:	86 bd       	out	0x26, r24	; 38
	
	TCCR1A = 0xA1;//0b 1010 0001 
  6a:	81 ea       	ldi	r24, 0xA1	; 161
  6c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x09;//00001001 
  6e:	89 e0       	ldi	r24, 0x09	; 9
  70:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 200;
  72:	88 ec       	ldi	r24, 0xC8	; 200
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	9b bd       	out	0x2b, r25	; 43
  78:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 50;
  7a:	82 e3       	ldi	r24, 0x32	; 50
  7c:	90 e0       	ldi	r25, 0x00	; 0
  7e:	99 bd       	out	0x29, r25	; 41
  80:	88 bd       	out	0x28, r24	; 40
#include <avr/interrupt.h>
#include <avr/iom8.h>

void ADC_init()
{
         ADMUX = 0x00;
  82:	17 b8       	out	0x07, r1	; 7
         ADCSRA = 0x8D;
  84:	8d e8       	ldi	r24, 0x8D	; 141
  86:	86 b9       	out	0x06, r24	; 6
	TCCR1B = 0x09;//00001001 
	OCR1A = 200;
	OCR1B = 50;
	
	ADC_init();
	DDRD = 0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	81 bb       	out	0x11, r24	; 17
	//(1 << WGM12) | (1 << CS10)	
	//sei();
	
   while (1)
   {
		val = ADC_result(0)/4;
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	d8 df       	rcall	.-80     	; 0x40 <ADC_result>
  90:	96 95       	lsr	r25
  92:	87 95       	ror	r24
  94:	96 95       	lsr	r25
  96:	87 95       	ror	r24
		OCR1A = val;
  98:	9b bd       	out	0x2b, r25	; 43
  9a:	8a bd       	out	0x2a, r24	; 42
  9c:	f7 cf       	rjmp	.-18     	; 0x8c <main+0x2e>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
